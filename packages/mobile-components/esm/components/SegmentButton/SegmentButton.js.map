{"version":3,"sources":["../../../src/components/SegmentButton/SegmentButton.tsx"],"names":["React","useEffect","useState","useCallback","filterProps","useRefHook","uiComponent","useWindowSize","foldThemeParams","createClassName","segmentButtonTheme","groupClassName","themeStyle","props","display","width","shrink","textRules","buttonClassName","position","grow","height","slideClassName","SegmentButton","options","name","onChange","theme","tokens","value","length","windowSize","ref","setRef","geometry","setGeometry","current","buttons","querySelectorAll","forEach","node","transform","offsetLeft","offsetWidth","offsetHeight","innerWidth","Group","Button","Slide","groupStyle","style","buttonStyle","slideStyle","onClick","onKeyDown","event","next","currentTarget","exit","children","key","preventDefault","nextElementSibling","firstChild","previousElementSibling","lastChild","disabled","type","focus","click","map","item","checked","text"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useCallback } from 'react'\nimport { filterProps, useRefHook, uiComponent, useWindowSize, foldThemeParams, createClassName } from '@avito/core'\nimport { SegmentButtonProps } from './contract'\nimport { segmentButtonTheme } from './theme'\n\nconst groupClassName = createClassName<SegmentButtonProps, typeof segmentButtonTheme>(\n  (themeStyle, props) => ({\n    display: 'flex',\n    width: 1,\n    shrink: false,\n    ...themeStyle,\n    ...props,\n  }),\n  (textRules) => (`\n    position: relative;\n\n    ${textRules}\n  `)\n)\n\nconst buttonClassName = createClassName<SegmentButtonProps, typeof segmentButtonTheme>(\n  (themeStyle) => ({\n    display: 'inline-block',\n    position: 'relative',\n    grow: true,\n    height: 1,\n    ...themeStyle,\n  }),\n  (textRules) => (`\n    padding: 0px;\n    margin: 0px;\n    border: 0px;\n    background: transparent;\n    font-family: inherit;\n    font-size: inherit;\n    outline: 0;\n    cursor: pointer;\n    user-select: none;\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n\n    &::-moz-focus-inner {\n      border: 0;\n    }\n\n    ${textRules}\n  `)\n)\n\nconst slideClassName = createClassName<SegmentButtonProps, typeof segmentButtonTheme>(\n  (themeStyle) => ({\n    display: 'inline-block',\n    height: 1,\n    ...themeStyle,\n  }),\n  (textRules) => `\n    position: absolute;\n    left: 0;\n    transition: transform .2s ease-in;\n    ${textRules}\n  `\n)\n\ntype Geometry = {\n  [key in string]: { transform: string, width: number, height: number }\n}\n\nexport const SegmentButton = uiComponent('SegmentButton', segmentButtonTheme)((\n  { options, name, onChange, ...props }: SegmentButtonProps,\n  { theme, tokens }\n) => {\n  props.value = !props.value && options && options.length > 0 ? options[0].value : props.value\n  const windowSize = useWindowSize()\n\n  const [ref, setRef] = useRefHook<HTMLElement>()\n  const [geometry, setGeometry] = useState<Geometry>({})\n\n  useEffect(() => {\n    if (!ref.current) return\n\n    const geometry: Geometry = {}\n    const buttons = ref.current.querySelectorAll('[type=button]') as NodeListOf<HTMLButtonElement>\n\n    buttons.forEach(node => {\n      geometry[node.value] = {\n        transform: `translateX(${node.offsetLeft}px)`,\n        width: node.offsetWidth,\n        height: node.offsetHeight,\n      }\n    })\n\n    setGeometry(geometry)\n  }, [windowSize.innerWidth])\n\n  const { Group, Button, Slide } = foldThemeParams(props, theme)\n  const groupStyle = groupClassName(props, tokens, Group.style)\n  const buttonStyle = buttonClassName(props, tokens, Button.style)\n  const slideStyle = slideClassName(props, tokens, Slide.style)\n\n  const onClick = (value: SegmentButtonProps['value']) => {\n    if (value === props.value) return\n\n    onChange && onChange({ name, value })\n  }\n\n  const onKeyDown = useCallback((event: React.KeyboardEvent<HTMLButtonElement>) => {\n    let next: HTMLButtonElement | null = event.currentTarget\n    let exit = ref.current!.children.length\n\n    do {\n      switch (event.key) {\n        case 'ArrowRight':\n        case 'ArrowDown':\n          event.preventDefault()\n          next = (next.nextElementSibling || ref.current!.firstChild) as HTMLButtonElement\n          break\n        case 'ArrowUp':\n        case 'ArrowLeft':\n          event.preventDefault()\n          next = (next.previousElementSibling || ref.current!.lastChild) as HTMLButtonElement\n          break\n      }\n\n    } while (next && (next.disabled || next.type !== 'button') && exit--)\n\n    if (next) {\n      next.focus()\n      next.click()\n    }\n  }, [])\n\n  return (\n    <div ref={setRef} css={groupStyle} role='radiogroup' {...filterProps(props)}>\n      <div css={slideStyle} style={geometry[props.value!]} />\n      {options && options.map(item => {\n        const checked = item.value === props.value\n\n        return (\n          <button\n            key={item.value}\n            css={buttonStyle}\n            type='button'\n            value={item.value}\n            onClick={() => onClick(item.value)}\n            onKeyDown={onKeyDown}\n            role='radio'\n            aria-checked={checked}\n            disabled={props.disabled || item.disabled}\n            tabIndex={checked ? 0 : -1}\n          >\n            {item.text}\n          </button>\n        )\n      })}\n    </div>\n  )\n})\n"],"file":"SegmentButton.js"}