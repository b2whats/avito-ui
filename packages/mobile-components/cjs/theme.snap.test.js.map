{"version":3,"sources":["../src/theme.snap.test.ts"],"names":["variant","withToggle","override","toggleTheme","theme","Toggle","describe","it","expect","buttonTheme","Button","toMatchSnapshot","inputTheme","Input","textTheme","Text","describeTheme","checkboxTheme","Checkbox","checked","shape","radioTheme","Radio","switcherTheme","Switcher","loading","textareaTheme","Textarea","clearable","size","name","propValues","fuzz","cartesian","valuesByKey","res","Object","entries","forEach","key","values","reduce","acc","value","map","item","props","JSON","stringify"],"mappings":"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","sourcesContent":["import {\n  mergeTheme,\n  foldThemeParams,\n  buttonTheme,\n  inputTheme,\n  textTheme,\n  checkboxTheme,\n  toggleTheme,\n  textareaTheme,\n  radioTheme,\n  switcherTheme\n} from '@avito/core'\nimport { theme } from './theme'\n\nconst variant = ['primary', 'secondary', 'success', 'error', 'warning']\nconst withToggle = (override: any) => mergeTheme(toggleTheme, theme.Toggle, override)\n\ndescribe('mobile theme', () => {\n  it('button theme snap', () => {\n    expect(mergeTheme(buttonTheme, theme.Button)).toMatchSnapshot()\n  })\n  it('input theme snap', () => {\n    expect(mergeTheme(inputTheme, theme.Input)).toMatchSnapshot()\n  })\n  it('text theme snap', () => {\n    expect(mergeTheme(textTheme, theme.Text)).toMatchSnapshot()\n  })\n\n  describeTheme('checkbox', withToggle(mergeTheme(checkboxTheme, theme.Checkbox)), {\n    variant,\n    checked: [true, false],\n    shape: ['circle', 'square'],\n  })\n\n  describeTheme('radio', withToggle(mergeTheme(radioTheme, theme.Radio)), {\n    variant,\n    checked: [true, false],\n  })\n\n  describeTheme('switcher', withToggle(mergeTheme(switcherTheme, theme.Switcher)), {\n    variant,\n    checked: [true, false],\n    loading: [true, false],\n  })\n\n  describeTheme('textarea', mergeTheme(textareaTheme, theme.Textarea), {\n    variant,\n    clearable: [true, false],\n    size: ['s', 'm', 'l'],\n  })\n})\n\nfunction describeTheme(name: string, theme: any, propValues: { [K: string]: any[] }) {\n  describe(name, () => {\n    it('snap', () => expect(theme).toMatchSnapshot())\n    it('fuzz', () => fuzz(propValues, theme))\n  })\n}\n\nfunction cartesian<T extends { [K: string]: any[] }>(valuesByKey: T): { [K in keyof T]: any }[] {\n  let res: any[] = [{}]\n  Object.entries(valuesByKey).forEach(([key, values]) => {\n    res = values.reduce(\n      (acc, value) => [...acc, ...res.map(item => ({ ...item, [key]: value }))],\n      [])\n  })\n  return res\n}\n\nfunction fuzz(propValues: { [K: string]: any[] }, theme: any) {\n  cartesian(propValues).forEach(props => {\n    expect(foldThemeParams(props, theme)).toMatchSnapshot(JSON.stringify(props))\n  })\n}\n"],"file":"theme.snap.test.js"}