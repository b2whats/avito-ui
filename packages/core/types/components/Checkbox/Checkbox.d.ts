import React from 'react';
export declare const Checkbox: <T extends object>(props: Pick<import("../Toggle").ToggleProps, "disabled" | "label" | "size" | "height" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "width" | "m" | "shape" | "shrink" | "grow" | "mx" | "my" | "mt" | "mr" | "mb" | "ml" | "align" | "valignSelf" | "valign" | "variant" | "value" | "name" | "onChange" | "checked" | "indeterminate" | "description" | "labelPosition" | "id" | "tabIndex" | "onClick" | "onMouseEnter" | "onMouseLeave" | "onKeyDown"> & {
    override?: import("../..").DeepPartial<{
        defaultProps?: Partial<Pick<import("../Toggle").ToggleProps, "disabled" | "label" | "size" | "height" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "width" | "m" | "shape" | "shrink" | "grow" | "mx" | "my" | "mt" | "mr" | "mb" | "ml" | "align" | "valignSelf" | "valign" | "variant" | "value" | "name" | "onChange" | "checked" | "indeterminate" | "description" | "labelPosition" | "id" | "tabIndex" | "onClick" | "onMouseEnter" | "onMouseLeave" | "onKeyDown">> | undefined;
        mapProps?: ((props: Pick<import("../Toggle").ToggleProps, "disabled" | "label" | "size" | "height" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "width" | "m" | "shape" | "shrink" | "grow" | "mx" | "my" | "mt" | "mr" | "mb" | "ml" | "align" | "valignSelf" | "valign" | "variant" | "value" | "name" | "onChange" | "checked" | "indeterminate" | "description" | "labelPosition" | "id" | "tabIndex" | "onClick" | "onMouseEnter" | "onMouseLeave" | "onKeyDown">) => Partial<Pick<import("../Toggle").ToggleProps, "disabled" | "label" | "size" | "height" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "width" | "m" | "shape" | "shrink" | "grow" | "mx" | "my" | "mt" | "mr" | "mb" | "ml" | "align" | "valignSelf" | "valign" | "variant" | "value" | "name" | "onChange" | "checked" | "indeterminate" | "description" | "labelPosition" | "id" | "tabIndex" | "onClick" | "onMouseEnter" | "onMouseLeave" | "onKeyDown">>) | undefined;
        scheme: {
            Toggle: import("../..").SchemeType<Pick<import("../Toggle").ToggleProps, "disabled" | "label" | "size" | "height" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "width" | "m" | "shape" | "shrink" | "grow" | "mx" | "my" | "mt" | "mr" | "mb" | "ml" | "align" | "valignSelf" | "valign" | "variant" | "value" | "name" | "onChange" | "checked" | "indeterminate" | "description" | "labelPosition" | "id" | "tabIndex" | "onClick" | "onMouseEnter" | "onMouseLeave" | "onKeyDown">, never, {}>;
            Switch: import("../..").SchemeType<Pick<import("../Toggle").ToggleProps, "disabled" | "label" | "size" | "height" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "width" | "m" | "shape" | "shrink" | "grow" | "mx" | "my" | "mt" | "mr" | "mb" | "ml" | "align" | "valignSelf" | "valign" | "variant" | "value" | "name" | "onChange" | "checked" | "indeterminate" | "description" | "labelPosition" | "id" | "tabIndex" | "onClick" | "onMouseEnter" | "onMouseLeave" | "onKeyDown">, never, {}>;
            Icon: import("../..").SchemeType<Pick<import("../Toggle").ToggleProps, "disabled" | "label" | "size" | "height" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "width" | "m" | "shape" | "shrink" | "grow" | "mx" | "my" | "mt" | "mr" | "mb" | "ml" | "align" | "valignSelf" | "valign" | "variant" | "value" | "name" | "onChange" | "checked" | "indeterminate" | "description" | "labelPosition" | "id" | "tabIndex" | "onClick" | "onMouseEnter" | "onMouseLeave" | "onKeyDown">, import("../Icon").IconProps, {}>;
            Label: import("../..").SchemeType<Pick<import("../Toggle").ToggleProps, "disabled" | "label" | "size" | "height" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "width" | "m" | "shape" | "shrink" | "grow" | "mx" | "my" | "mt" | "mr" | "mb" | "ml" | "align" | "valignSelf" | "valign" | "variant" | "value" | "name" | "onChange" | "checked" | "indeterminate" | "description" | "labelPosition" | "id" | "tabIndex" | "onClick" | "onMouseEnter" | "onMouseLeave" | "onKeyDown">, import("../Text").TextProps, {}>;
        };
    }> | undefined;
    ref?: ((instance: HTMLElement | null) => void) | React.RefObject<HTMLElement> | null | undefined;
} & T) => JSX.Element;
