{"version":3,"sources":["../../src/formatters/numberFormatter.ts"],"names":["numberFormatter","positiveOnly","maxIntDigits","maxFracDigits","accept","RegExp","filter","frag","join","format","str","match","isNumeric","sign","int","sep","frac","prettyInt","replace","substring","v","parse","stringValue"],"mappings":";;;;;AAAA;;AAEO,IAAMA,eAAe,GAAG,kCAAc,gBAAmD;AAAA,MAAhDC,YAAgD,QAAhDA,YAAgD;AAAA,MAAlCC,YAAkC,QAAlCA,YAAkC;AAAA,MAApBC,aAAoB,QAApBA,aAAoB;AAC9F,MAAMC,MAAM,GAAG,IAAIC,MAAJ,CAAW,CACxBJ,YAAY,GAAG,EAAH,GAAQ,IADI,EAExB,MAFwB,EAGxBE,aAAa,GAAG,MAAH,GAAY,EAHD,EAIxBG,MAJwB,CAIjB,UAAAC,IAAI;AAAA,WAAIA,IAAJ;AAAA,GAJa,EAIHC,IAJG,CAIE,GAJF,CAAX,EAImB,GAJnB,CAAf;AAKA,SAAO;AACLJ,IAAAA,MAAM,EAANA,MADK;AAELK,IAAAA,MAFK,kBAEEC,GAFF,EAEO;AAAA,kBAMK,CAACA,GAAG,CAACC,KAAJ,CAAUP,MAAV,KAAqB,EAAtB,EAA0BI,IAA1B,CAA+B,EAA/B,EAAmCG,KAAnC,CAAyC,wBAAzC,KAAsE,EAN3E;AAAA;AAAA,UAERC,SAFQ,uBAEI,KAFJ;AAAA;AAAA,UAGRC,IAHQ,wBAGD,EAHC;AAAA;AAAA,UAIRC,IAJQ,wBAIF,EAJE;AAAA;AAAA,UAKRC,GALQ,wBAKF,EALE;AAAA;AAAA,UAMRC,IANQ,wBAMD,EANC;;AAOV,UAAI,CAACJ,SAAL,EAAgB,OAAO,EAAP;;AAChB,UAAMK,SAAS,SAAMhB,YAAY,GAAG,EAAH,GAAQY,IAA1B,IAAiCC,IAAG,CACjD;AADiD,OAEhDI,OAF6C,CAErC,UAFqC,EAEzB,EAFyB,EAG9C;AAH8C,OAI7CC,SAJ6C,CAInC,CAJmC,EAIhCjB,YAJgC,EAK9C;AAL8C,OAM7CgB,OAN6C,CAMrC,uBANqC,EAMZ,GANY,CAAhD;;AAOA,UAAI,CAACf,aAAL,EAAoB,OAAOc,SAAP;AACpB,kBAAUA,SAAV,GAAsBF,GAAtB,GAA4BC,IAAI,CAACG,SAAL,CAAe,CAAf,EAAkBhB,aAAlB,CAA5B;AACD,KAnBI;AAoBLe,IAAAA,OAAO,EAAE,iBAAAE,CAAC;AAAA,aAAIA,CAAC,CAACF,OAAF,CAAU,GAAV,EAAe,GAAf,CAAJ;AAAA,KApBL;AAqBLG,IAAAA,KArBK,iBAqBCC,WArBD,EAqBsB;AACzB,aAAO,CAACA,WAAW,CAACX,KAAZ,CAAkBP,MAAlB,KAA6B,EAA9B,EAAkCI,IAAlC,CAAuC,EAAvC,CAAP;AACD;AAvBI,GAAP;AAyBD,CA/B8B,EA+B5B;AACDN,EAAAA,YAAY,EAAE,EADb;AAEDC,EAAAA,aAAa,EAAE,CAFd;AAGDF,EAAAA,YAAY,EAAE;AAHb,CA/B4B,CAAxB","sourcesContent":["import { makeFormatter } from './makeFormatter'\n\nexport const numberFormatter = makeFormatter(({ positiveOnly, maxIntDigits, maxFracDigits }) => {\n  const accept = new RegExp([\n    positiveOnly ? '' : '^-',\n    '\\\\d+',\n    maxFracDigits ? '[,.]' : '',\n  ].filter(frag => frag).join('|'), 'g')\n  return {\n    accept,\n    format(str) {\n      const [\n        isNumeric = false,\n        sign = '',\n        int = '',\n        sep = '',\n        frac = ''] = (str.match(accept) || []).join('').match(/^(-)?(\\d*)([,.])?(\\d*)/) || []\n      if (!isNumeric) return ''\n      const prettyInt = `${positiveOnly ? '' : sign}${int\n        // remove leading zeroes\n        .replace(/^0+(?!$)/, '')\n        // trim length\n        .substring(0, maxIntDigits)\n        // thousand separator\n        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')}`\n      if (!maxFracDigits) return prettyInt\n      return `${prettyInt}${sep}${frac.substring(0, maxFracDigits)}`\n    },\n    replace: v => v.replace(',', '.'),\n    parse(stringValue: string) {\n      return (stringValue.match(accept) || []).join('')\n    },\n  }\n}, {\n  maxIntDigits: 15,\n  maxFracDigits: 0,\n  positiveOnly: true,\n})\n\nexport type NumberFormatterSettings = typeof numberFormatter.settings\n"],"file":"numberFormatter.js"}