{"version":3,"sources":["../../src/theme/mergeTheme.ts"],"names":["cache","WeakMap","defaultKey","mergeTheme","defaultTheme","globalOverride","localOverride","cursor","has","set","get","mergeThemes","themes","res","deepmerge","all","map","t","mapProps","reduce","composed","props"],"mappings":";;;;;;;;;AAAA;;AAGA,IAAMA,KAAK,GAAG,IAAIC,OAAJ,EAAd;AACA,IAAMC,UAAU,GAAG,EAAnB;;AAEO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CACxBC,YADwB,EAExBC,cAFwB,EAGxBC,aAHwB,EAI6E;AAAA,MAFrGD,cAEqG;AAFrGA,IAAAA,cAEqG,GAFpEH,UAEoE;AAAA;;AAAA,MADrGI,aACqG;AADrGA,IAAAA,aACqG,GADrEJ,UACqE;AAAA;;AACrG,MAAIK,MAAM,GAAGP,KAAb;;AAEA,MAAI,CAACO,MAAM,CAACC,GAAP,CAAWJ,YAAX,CAAL,EAA+B;AAC7BG,IAAAA,MAAM,CAACE,GAAP,CAAWL,YAAX,EAAyB,IAAIH,OAAJ,EAAzB;AACD;;AACDM,EAAAA,MAAM,GAAGA,MAAM,CAACG,GAAP,CAAWN,YAAX,CAAT;;AAEA,MAAI,CAACG,MAAM,CAACC,GAAP,CAAWH,cAAX,CAAL,EAAiC;AAC/BE,IAAAA,MAAM,CAACE,GAAP,CAAWJ,cAAX,EAA2B,IAAIJ,OAAJ,EAA3B;AACD;;AACDM,EAAAA,MAAM,GAAGA,MAAM,CAACG,GAAP,CAAWL,cAAX,CAAT;;AAEA,MAAI,CAACE,MAAM,CAACC,GAAP,CAAWF,aAAX,CAAL,EAAgC;AAC9BC,IAAAA,MAAM,CAACE,GAAP,CAAWH,aAAX,EAA0BK,WAAW,CAAC,CAACP,YAAD,EAAeC,cAAf,EAA+BC,aAA/B,CAAD,CAArC;AACD;;AAED,SAAOC,MAAM,CAACG,GAAP,CAAWJ,aAAX,CAAP;AACD,CAtBM;;;;AAwBP,SAASK,WAAT,CAAqBC,MAArB,EAAoC;AAClC,MAAMC,GAAG,GAAGC,sBAAUC,GAAV,CAAcH,MAAd,CAAZ;;AACAC,EAAAA,GAAG,CAAC,UAAD,CAAH,GAAkBD,MAAM,CAACI,GAAP,CAAW,UAAAC,CAAC;AAAA,WAAIA,CAAC,GAAGA,CAAC,CAACC,QAAL,GAAgB,IAArB;AAAA,GAAZ,EAAuCC,MAAvC,CAA8C,UAACC,QAAD,EAAWJ,GAAX,EAAmB;AACjF,WAAOA,GAAG,GAAG,UAACK,KAAD;AAAA,2CAAsBA,KAAtB,EAAgCL,GAAG,CAACI,QAAQ,CAACC,KAAD,CAAT,CAAnC;AAAA,KAAH,GAA6DD,QAAvE;AACD,GAFiB,EAEf,UAACC,KAAD;AAAA,WAAgBA,KAAhB;AAAA,GAFe,CAAlB;AAGA,SAAOR,GAAP;AACD","sourcesContent":["import deepmerge from 'deepmerge'\nimport { DeepPartial } from '../utils/types'\n\nconst cache = new WeakMap()\nconst defaultKey = {}\n\nexport const mergeTheme = <T extends object>(\n  defaultTheme: T,\n  globalOverride: DeepPartial<T> = defaultKey,\n  localOverride: DeepPartial<T> = defaultKey\n): T & { mapProps: T extends { mapProps?: (p: infer Props) => any } ? (p: Props) => Props : never } => {\n  let cursor = cache\n\n  if (!cursor.has(defaultTheme)) {\n    cursor.set(defaultTheme, new WeakMap())\n  }\n  cursor = cursor.get(defaultTheme)\n\n  if (!cursor.has(globalOverride)) {\n    cursor.set(globalOverride, new WeakMap())\n  }\n  cursor = cursor.get(globalOverride)\n\n  if (!cursor.has(localOverride)) {\n    cursor.set(localOverride, mergeThemes([defaultTheme, globalOverride, localOverride]))\n  }\n\n  return cursor.get(localOverride)\n}\n\nfunction mergeThemes(themes: any[]) {\n  const res = deepmerge.all(themes)\n  res['mapProps'] = themes.map(t => t ? t.mapProps : null).reduce((composed, map) => {\n    return map ? (props: any) => ({ ...props, ...map(composed(props)) }) : composed\n  }, (props: any) => props)\n  return res\n}\n"],"file":"mergeTheme.js"}