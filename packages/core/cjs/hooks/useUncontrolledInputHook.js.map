{"version":3,"sources":["../../src/hooks/useUncontrolledInputHook.ts"],"names":["useUncontrolledInputHook","props","value","onChange","innerValue","setValue","event"],"mappings":";;;;;AAAA;;AAQO,IAAMA,wBAAwB,GAAG,SAA3BA,wBAA2B,CAAiBC,KAAjB,EAAkD;AAAA,MAClFC,KADkF,GAC9DD,KAD8D,CAClFC,KADkF;AAAA,MAC3EC,QAD2E,GAC9DF,KAD8D,CAC3EE,QAD2E;;AAGxF,MAAI,CAACA,QAAL,EAAe;AAAA,oBACkB,qBAASF,KAAK,CAACC,KAAf,CADlB;AAAA,QACNE,UADM;AAAA,QACMC,QADN;;AAGbF,IAAAA,QAAQ,GAAG,kBAAAG,KAAK;AAAA,aAAID,QAAQ,CAACC,KAAK,CAACJ,KAAP,CAAZ;AAAA,KAAhB;;AAEA,0BAAU,YAAM;AACdG,MAAAA,QAAQ,CAACJ,KAAK,CAACC,KAAP,CAAR;AACD,KAFD,EAEG,CAACD,KAAK,CAACC,KAAP,CAFH;AAIAA,IAAAA,KAAK,GAAGE,UAAR;AACD;;AAED,SAAO,CAACF,KAAD,EAAQC,QAAR,CAAP;AACD,CAhBM","sourcesContent":["import { useState, useEffect } from 'react'\nimport { ChangeHandler } from '../utils'\n\ntype Props<Value, Element> = {\n  value?: Value | null\n  onChange?: ChangeHandler<Value | null, Element>\n}\n\nexport const useUncontrolledInputHook = <Value, Element>(props: Props<Value, Element>) => {\n  let { value, onChange } = props\n\n  if (!onChange) {\n    const [innerValue, setValue] = useState(props.value)\n\n    onChange = event => setValue(event.value)\n\n    useEffect(() => {\n      setValue(props.value)\n    }, [props.value])\n\n    value = innerValue\n  }\n\n  return [value, onChange] as const\n}\n"],"file":"useUncontrolledInputHook.js"}