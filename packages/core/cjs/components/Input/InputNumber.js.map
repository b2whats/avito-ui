{"version":3,"sources":["../../../src/components/Input/InputNumber.tsx"],"names":["InputNumber","onChange","props","outerValue","numberOrEmpty","value","stringValue","setStringValue","numericEquals","String","formatter","numberFormatter","setup","settingKeys","map","k","inputMode","settings","event","numericValue","onKeyDown","e","target","key","preventDefault","v","numeric","Number","isSafeCast","isNaN","v1","v2","format","positiveOnly","maxFracDigits"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, InputHTMLAttributes } from 'react'\nimport { numberFormatter } from '../../formatters'\nimport type { NumberFormatterSettings } from '../../formatters'\nimport { useIsomorphicLayoutEffect } from '../../hooks'\nimport { invokeAll } from '../../utils'\nimport { InputNumberProps } from './contract'\nimport { Input } from './Input'\n\nexport const InputNumber = ({ onChange = () => {}, ...props }: InputNumberProps) => {\n  const outerValue = numberOrEmpty(props.value)\n  // Буферизация промежуточных значений \"-\" или \"99.\"\n  const [stringValue, setStringValue] = useState(outerValue)\n  useIsomorphicLayoutEffect(() => {\n    if (!numericEquals(outerValue, stringValue)) {\n      setStringValue(String(outerValue))\n    }\n  }, [outerValue])\n  const formatter = useMemo(\n    () => numberFormatter.setup(props),\n    numberFormatter.settingKeys.map(k => props[k]))\n\n  return (\n    <Input\n      inputMode={inputMode(formatter.settings)}\n      mask={formatter}\n      {...props}\n      value={stringValue}\n      onChange={event => {\n        setStringValue(event.value || '')\n        const numericValue = numberOrEmpty(event.value)\n        if (!numericEquals(numericValue, outerValue)) {\n          onChange({ ...event, value: numericValue })\n        }\n      }}\n      onKeyDown={invokeAll(props.onKeyDown, e => {\n        const target = e.target as HTMLInputElement\n        if (e.key === 'ArrowUp') {\n          onChange({ value: (outerValue || 0) + 1, target })\n          e.preventDefault()\n        } else if (e.key === 'ArrowDown') {\n          onChange({ value: (outerValue || 0) - 1, target })\n          e.preventDefault()\n        }\n      })}\n    />\n  )\n}\n\nfunction numberOrEmpty(v: any) {\n  const numeric = Number(v)\n  const isSafeCast = typeof v === 'number' || (typeof v === 'string' && v !== '')\n  return isSafeCast && !Number.isNaN(numeric) ? numeric : ''\n}\n\nfunction numericEquals(v1: any, v2: any){\n  return numberOrEmpty(v1) === numberOrEmpty(v2)\n}\n\n/**\n * Телефонная клавиатура с числами\n * https://css-tricks.com/everything-you-ever-wanted-to-know-about-inputmode/\n */\nfunction inputMode(format: NumberFormatterSettings): InputHTMLAttributes<any>['inputMode'] {\n  if (!format.positiveOnly) {\n    // наличие минуса на numeric / decimal не гарантировано\n    return 'text'\n  }\n  return format.maxFracDigits ? 'decimal' : 'numeric'\n}\n"],"file":"InputNumber.js"}