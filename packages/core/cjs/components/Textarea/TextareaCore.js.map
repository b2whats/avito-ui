{"version":3,"sources":["../../../src/components/Textarea/TextareaCore.tsx"],"names":["textareaStyle","css","TextareaCore","React","forwardRef","ref","maxRows","autoSize","resizable","props","textarea","setRef","autoCorrect","spellCheck","resize","node","current","placeholder","value","style","height","scrollHeight","preventClick","event","detail","stopPropagation","onClick","window","getComputedStyle","lineHeight","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","maxHeight"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;AAGA,IAAMA,aAAa,OAAGC,iBAAH,oBAAnB;;AAyBO,IAAMC,YAAY,gBAAGC,kBAAMC,UAAN,CAAiB,gBAE3CC,GAF2C,EAGxC;AAAA,MAFDC,OAEC,QAFDA,OAEC;AAAA,MAFQC,QAER,QAFQA,QAER;AAAA,MAFkBC,SAElB,QAFkBA,SAElB;AAAA,MAFgCC,KAEhC;;AAAA,oBACwB,uBAAWJ,GAAX,CADxB;AAAA,MACIK,QADJ;AAAA,MACcC,MADd;;AAGHF,EAAAA,KAAK,iCACAA,KADA;AAEHJ,IAAAA,GAAG,EAAEM,MAFF;AAGHC,IAAAA,WAAW,EAAE,KAHV;AAIHC,IAAAA,UAAU,EAAE;AAJT,IAAL;;AAOA,MAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACnB,QAAMC,IAAI,GAAGL,QAAQ,CAACM,OAAtB;AAEA,QAAI,CAACD,IAAL,EAAW,OAHQ,CAKnB;AACA;;AANmB,QAOXE,WAPW,GAOYF,IAPZ,CAOXE,WAPW;AAAA,QAOEC,KAPF,GAOYH,IAPZ,CAOEG,KAPF;;AASnB,QAAIA,KAAJ,EAAW;AACTH,MAAAA,IAAI,CAACI,KAAL,CAAWC,MAAX,GAAoB,MAApB;AACAL,MAAAA,IAAI,CAACI,KAAL,CAAWC,MAAX,GAAuBL,IAAI,CAACM,YAA5B;AACD,KAHD,MAGO;AACLN,MAAAA,IAAI,CAACE,WAAL,GAAmB,EAAnB;AACAF,MAAAA,IAAI,CAACI,KAAL,CAAWC,MAAX,GAAoB,MAApB;AACAL,MAAAA,IAAI,CAACI,KAAL,CAAWC,MAAX,GAAuBL,IAAI,CAACM,YAA5B;AACAN,MAAAA,IAAI,CAACE,WAAL,GAAmBA,WAAnB;AACD;AACF,GAlBD;;AAoBA,MAAMK,YAAY,GAAG,sBAAU,UAACC,KAAD,EAAW;AACxC,QAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwBD,KAAK,CAACE,eAAN;AACzB,GAFoB,EAElBhB,KAAK,CAACiB,OAFY,CAArB;AAIA,8BAAgB,YAAM;AACpB,QAAMX,IAAI,GAAGL,QAAQ,CAACM,OAAtB;AACA,QAAI,CAACD,IAAL,EAAW;AAEXA,IAAAA,IAAI,CAACI,KAAL,CAAWL,MAAX,GAAoBN,SAAS,GAAG,MAAH,GAAY,MAAzC;;AAEA,QAAIF,OAAJ,EAAa;AAAA,kCAC0EqB,MAAM,CAACC,gBAAP,CAAwBb,IAAxB,CAD1E;AAAA,UACHc,UADG,yBACHA,UADG;AAAA,UACSC,UADT,yBACSA,UADT;AAAA,UACqBC,aADrB,yBACqBA,aADrB;AAAA,UACoCC,cADpC,yBACoCA,cADpC;AAAA,UACoDC,iBADpD,yBACoDA,iBADpD;;AAGXlB,MAAAA,IAAI,CAACI,KAAL,CAAWe,SAAX,aAA+B5B,OAA/B,WAA4CuB,UAA5C,WAA4DC,UAA5D,WAA4EC,aAA5E,WAA+FC,cAA/F,WAAmHC,iBAAnH;AACD;AACF,GAXD,EAWG,CAAC3B,OAAD,EAAUE,SAAV,CAXH;AAaA,wBAAU,YAAM;AACdD,IAAAA,QAAQ,IAAIO,MAAM,EAAlB;AACD,GAFD,EAEG,CAACP,QAAD,EAAWE,KAAK,CAACS,KAAjB,CAFH;AAIA,SACE;AAAU,IAAA,GAAG,EAAElB;AAAf,KAAkC,wBAAYS,KAAZ,CAAlC;AAAsD,IAAA,OAAO,EAAEa;AAA/D,KADF;AAGD,CAzD2B,CAArB","sourcesContent":["import React, { useEffect, useLayoutEffect } from 'react'\nimport { useRefHook } from '../../hooks/'\nimport { css } from '../../styled-system/'\nimport { filterProps, invokeAll } from '../../utils/'\nimport { TextareaCoreProps } from './contract'\n\nconst textareaStyle = css`\n  resize: none;\n  box-sizing: border-box;\n  overflow: auto;\n  width: 100%;\n  min-height: 1em;\n  height: 100%;\n  padding: 0px;\n  margin: 0px;\n  border-width: 0;\n  font-size: inherit;\n  font-family: inherit;\n  font-weight: inherit;\n  line-height: inherit;\n  color: inherit;\n  outline: none;\n  background-color: transparent;\n  -webkit-tap-highlight-color: rgba(0,0,0,0);\n  -webkit-text-fill-color: currentcolor;\n\n  &[disabled] {\n    cursor: inherit;\n  }\n`\n\nexport const TextareaCore = React.forwardRef((\n  { maxRows, autoSize, resizable, ...props }: TextareaCoreProps,\n  ref: React.Ref<HTMLTextAreaElement>\n) => {\n  const [textarea, setRef] = useRefHook(ref)\n\n  props = {\n    ...props,\n    ref: setRef,\n    autoCorrect: 'off',\n    spellCheck: false,\n  } as TextareaCoreProps\n\n  const resize = () => {\n    const node = textarea.current\n\n    if (!node) return\n\n    // Placeholder создает скрол когда не помещается, поэтому когда текста в нем очень много, высота высчиывается исходя из количества строк placeholder\n    // То есть при первоначальном вводе текста текстовое поле сожмется до минимальной ширины\n    const { placeholder, value } = node\n\n    if (value) {\n      node.style.height = 'auto'\n      node.style.height = `${node.scrollHeight}px`\n    } else {\n      node.placeholder = ''\n      node.style.height = 'auto'\n      node.style.height = `${node.scrollHeight}px`\n      node.placeholder = placeholder\n    }\n  }\n\n  const preventClick = invokeAll((event) => {\n    if (event.detail === 0) event.stopPropagation()\n  }, props.onClick)\n\n  useLayoutEffect(() => {\n    const node = textarea.current\n    if (!node) return\n\n    node.style.resize = resizable ? 'auto' : 'none'\n\n    if (maxRows) {\n      const { lineHeight, paddingTop, paddingBottom, borderTopWidth, borderBottomWidth } = window.getComputedStyle(node)\n\n      node.style.maxHeight = `calc(${maxRows} * ${lineHeight} + ${paddingTop} + ${paddingBottom} + ${borderTopWidth} + ${borderBottomWidth})`\n    }\n  }, [maxRows, resizable])\n\n  useEffect(() => {\n    autoSize && resize()\n  }, [autoSize, props.value])\n\n  return (\n    <textarea css={textareaStyle} {...filterProps(props)} onClick={preventClick} />\n  )\n})\n"],"file":"TextareaCore.js"}