{"version":3,"sources":["../../src/hooks/useRefHook.ts"],"names":["useCallback","useRef","useRefHook","refs","ref","setRef","node","current","forEach"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,MAAtB,QAAyC,OAAzC;AAEA,OAAO,SAASC,UAAT,GAA0C;AAAA,oCAAhBC,IAAgB;AAAhBA,IAAAA,IAAgB;AAAA;;AAC/C,MAAMC,GAAG,GAAGH,MAAM,CAAW,IAAX,CAAlB;AACA,MAAMI,MAAM,GAAGL,WAAW,CAAC,UAACM,IAAD,EAAU;AACnCF,IAAAA,GAAG,CAACG,OAAJ,GAAcD,IAAd;AAEAH,IAAAA,IAAI,CAACK,OAAL,CAAa,UAAAJ,GAAG,EAAI;AAClB,UAAI,CAACA,GAAL,EAAU;;AAEV,UAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;AAC7BA,QAAAA,GAAG,CAACE,IAAD,CAAH;AACD,OAFD,MAEO;AACJF,QAAAA,GAAD,CAAaG,OAAb,GAAuBD,IAAvB;AACD;AACF,KARD;AASD,GAZyB,EAYvB,EAZuB,CAA1B;AAcA,SAAO,CAACF,GAAD,EAAMC,MAAN,CAAP;AACD","sourcesContent":["import { useCallback, useRef, Ref } from 'react'\n\nexport function useRefHook<T>(...refs: Ref<T>[]) {\n  const ref = useRef<T | null>(null)\n  const setRef = useCallback((node) => {\n    ref.current = node\n\n    refs.forEach(ref => {\n      if (!ref) return\n\n      if (typeof ref === 'function') {\n        ref(node)\n      } else {\n        (ref as any).current = node\n      }\n    })\n  }, [])\n\n  return [ref, setRef] as [typeof ref, typeof setRef]\n}\n"],"file":"useRefHook.js"}