{"version":3,"sources":["../../src/hooks/useSyntheticChange.ts"],"names":["useRef","useRifm","useSyntheticChange","value","onChange","options","stringValue","undefined","String","target","name","parse","v","rifmProps","current","e"],"mappings":";AAAA,SAA6BA,MAA7B,QAAwD,OAAxD;AACA,SAASC,OAAT,QAAwB,MAAxB;AAIA,OAAO,SAASC,kBAAT,CACLC,KADK,EAELC,SAFK,EAGLC,OAHK,EAIkC;AACvC,MAAMC,WAAW,GAAGH,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKI,SAA5B,GAAwC,EAAxC,GAA6CC,MAAM,CAACL,KAAD,CAAvE;;AACA,MAAI,CAACE,OAAL,EAAc;AACZ,WAAO,CACLC,WADK,EAEL;AAAA,UAAGG,MAAH,QAAGA,MAAH;AAAA,aAAgBL,SAAQ,CAAC;AAAED,QAAAA,KAAK,EAAEM,MAAM,CAACN,KAAhB;AAA8BM,QAAAA,MAAM,EAANA,MAA9B;AAAsCC,QAAAA,IAAI,EAAED,MAAM,CAACC;AAAnD,OAAD,CAAxB;AAAA,KAFK,CAAP;AAID;;AAPsC,uBASZL,OATY,CAS/BM,KAT+B;AAAA,MAS/BA,KAT+B,+BASvB,UAAAC,CAAC;AAAA,WAAIA,CAAJ;AAAA,GATsB;AAUvC,MAAMH,MAAM,GAAGT,MAAM,CAAiB,IAAjB,CAArB;AACA,MAAMa,SAAS,GAAGZ,OAAO;AACvBE,IAAAA,KAAK,EAAEG,WADgB;AAEvBF,IAAAA,QAAQ,EAAE,kBAACD,KAAD;AAAA,aAAgBC,SAAQ,CAAC;AAAED,QAAAA,KAAK,EAAEQ,KAAK,CAACR,KAAD,CAAd;AAA8BM,QAAAA,MAAM,EAAEA,MAAM,CAACK;AAA7C,OAAD,CAAxB;AAAA;AAFa,KAGpBT,OAHoB,EAAzB;AAKA,SAAO,CACLQ,SAAS,CAACV,KADL,EAEL,UAAAY,CAAC,EAAI;AACHN,IAAAA,MAAM,CAACK,OAAP,GAAiBC,CAAC,CAACN,MAAnB;AACAI,IAAAA,SAAS,CAACT,QAAV,CAAmBW,CAAnB;AACD,GALI,CAAP;AAOD","sourcesContent":["import { ChangeEventHandler, useRef, ChangeEvent } from 'react'\nimport { useRifm } from 'rifm'\nimport { Formatter } from '../formatters'\nimport { ChangeHandler } from '../utils'\n\nexport function useSyntheticChange<Value, Element extends (HTMLInputElement | HTMLTextAreaElement)>(\n  value: Value | undefined,\n  onChange: ChangeHandler<Value, Element>,\n  options?: Formatter\n): [string, ChangeEventHandler<Element>] {\n  const stringValue = value === null || value === undefined ? '' : String(value)\n  if (!options) {\n    return [\n      stringValue,\n      ({ target }) => onChange({ value: target.value as any, target, name: target.name }),\n    ]\n  }\n\n  const { parse = v => v } = options\n  const target = useRef<Element | null>(null)\n  const rifmProps = useRifm({\n    value: stringValue,\n    onChange: (value: any) => onChange({ value: parse(value) as any, target: target.current! }),\n    ...options,\n  })\n  return [\n    rifmProps.value,\n    e => {\n      target.current = e.target\n      rifmProps.onChange(e as ChangeEvent<any>)\n    },\n  ]\n}\n"],"file":"useSyntheticChange.js"}