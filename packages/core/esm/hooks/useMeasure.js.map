{"version":3,"sources":["../../src/hooks/useMeasure.ts"],"names":["useCallback","useState","useMeasure","bounds","setBounds","setRef","node","getBoundingClientRect"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AAaA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAAA,kBACFD,QAAQ,CAAgB,IAAhB,CADN;AAAA,MACvBE,MADuB;AAAA,MACfC,SADe;;AAG9B,MAAMC,MAAM,GAAGL,WAAW,CAAC,UAAAM,IAAI,EAAI;AACjC,QAAIA,IAAI,KAAK,IAAb,EAAmB;AACjBF,MAAAA,SAAS,CAACE,IAAI,CAACC,qBAAL,EAAD,CAAT;AACD;AACF,GAJyB,EAIvB,EAJuB,CAA1B;AAMA,SAAO,CAACJ,MAAD,EAASE,MAAT,CAAP;AACD,CAVM","sourcesContent":["import { useCallback, useState } from 'react'\n\ninterface Bounds {\n  left: number\n  height: number\n  top: number\n  width: number\n  bottom: number\n  x: number\n  y: number\n  right: number\n}\n\nexport const useMeasure = () => {\n  const [bounds, setBounds] = useState<Bounds | null>(null)\n\n  const setRef = useCallback(node => {\n    if (node !== null) {\n      setBounds(node.getBoundingClientRect())\n    }\n  }, [])\n\n  return [bounds, setRef] as [typeof bounds, typeof setRef]\n}\n"],"file":"useMeasure.js"}