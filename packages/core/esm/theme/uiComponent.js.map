{"version":3,"sources":["../../src/theme/uiComponent.ts"],"names":["forwardRef","useRefHook","useTheme","mergeTheme","uiComponent","name","theme","render","WrappedComponent","ref","override","props","globalTheme","componentTheme","defaultProps","mapProps","tokens","displayName"],"mappings":";;AAAA,SAASA,UAAT,QAAkD,OAAlD;AAEA,SAASC,UAAT;AAEA,SAASC,QAAT,QAAyB,GAAzB;AAEA,SAASC,UAAT;AAIA,OAAO,SAASC,WAAT,CAA+CC,IAA/C,EAAkEC,KAAlE,EAAoF;AACzF,SAAO,UACLC,MADK,EAMF;AAKH,QAAMC,gBAAgB,gBAAGR,UAAU,CAAC,gBAAwCS,GAAxC,EAA8D;AAAA,UAA3DC,QAA2D,QAA3DA,QAA2D;AAAA,UAA9CC,KAA8C;;AAChG,UAAMC,WAAW,GAAGV,QAAQ,EAA5B;AACA,UAAMW,cAAc,GAAGV,UAAU,CAACG,KAAD,EAAQM,WAAW,CAACP,IAAD,CAAnB,EAAqDK,QAArD,CAAjC;AACAC,MAAAA,KAAK,gBACCE,cAAD,CAAwBC,YADxB,EAEAH,KAFA,CAAL;AAIA,aAAOJ,MAAM,CACXM,cAAc,CAACE,QAAf,CAAwBJ,KAAxB,CADW,EAEX;AAAEL,QAAAA,KAAK,EAAEO,cAAT;AAAyBG,QAAAA,MAAM,EAAEJ;AAAjC,OAFW,EAGXX,UAAU,CAACQ,GAAD,CAHC,CAAb;AAID,KAXkC,CAAnC;AAYAD,IAAAA,gBAAgB,CAACS,WAAjB,GAA+BZ,IAA/B;AAEA,WAAOG,gBAAP;AACD,GA1BD;AA2BD","sourcesContent":["import { forwardRef, Ref, MutableRefObject } from 'react'\nimport { Tokens } from '@avito/tokens'\nimport { useRefHook } from '../hooks'\nimport { DeepPartial } from '../utils'\nimport { useTheme } from '.'\nimport { Theme } from './contract'\nimport { mergeTheme } from './mergeTheme'\n\ntype RefContainer<Element> = [MutableRefObject<Element | null>, (e: Element) => void]\n\nexport function uiComponent<ThemeType extends object>(name: keyof Theme, theme: ThemeType) {\n  return <Props, RefType = HTMLElement>(\n    render: (\n      props: Props,\n      theme: { theme: ThemeType, tokens: Tokens },\n      ref: RefContainer<RefType>\n    ) => JSX.Element | null\n  ) => {\n    type ExternalProps = Props & {\n      override?: DeepPartial<ThemeType>,\n      ref?: Ref<RefType>,\n    }\n    const WrappedComponent = forwardRef(({ override, ...props }: ExternalProps, ref: Ref<RefType>) => {\n      const globalTheme = useTheme()\n      const componentTheme = mergeTheme(theme, globalTheme[name] as DeepPartial<ThemeType>, override)\n      props = {\n        ...(componentTheme as any).defaultProps,\n        ...props,\n      }\n      return render(\n        componentTheme.mapProps(props) as Props,\n        { theme: componentTheme, tokens: globalTheme },\n        useRefHook(ref))\n    })\n    WrappedComponent.displayName = name\n    type Component =<T extends object>(props: ExternalProps & T) => JSX.Element\n    return WrappedComponent as unknown as Component\n  }\n}\n"],"file":"uiComponent.js"}