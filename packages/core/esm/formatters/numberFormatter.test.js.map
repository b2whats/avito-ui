{"version":3,"sources":["../../src/formatters/numberFormatter.test.ts"],"names":["numberFormatter","pipeFormatter","format","replace","id","raw","describe","pipe","it","expect","toBe","setup","positiveOnly","maxIntDigits","maxFracDigits"],"mappings":"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","sourcesContent":["import { numberFormatter } from './numberFormatter'\n\nconst pipeFormatter = ({ format, replace = id => id }: typeof numberFormatter) => (raw: string) => {\n  return replace(format(raw))\n}\n\ndescribe('numberFormatter', () => {\n  describe('default integer format', () => {\n    const pipe = pipeFormatter(numberFormatter)\n    it('preserves empty string', () => expect(pipe('')).toBe(''))\n    it('separates thousands', () => {\n      expect(pipe('123')).toBe('123')\n      expect(pipe('1234567')).toBe('1 234 567')\n      expect(pipe('123456789')).toBe('123 456 789')\n    })\n    it('excludes disallowed symbols', () => expect(pipe('  1 a2  b 3c  ')).toBe('123'))\n    it('trims fraction', () => expect(pipe('1.23')).toBe('123'))\n    it('trims big numbers', () => {\n      expect(pipe('12345678901234567890')).toBe('123 456 789 012 345')\n      expect(pipe('    12345678901234567890')).toBe('123 456 789 012 345')\n    })\n  })\n\n  describe('positiveOnly', () => {\n    const pipe = pipeFormatter(numberFormatter.setup({ positiveOnly: false }))\n    it('removes sign by default', () => expect(pipeFormatter(numberFormatter)('-123')).toBe('123'))\n    it('preserves minus sign when positiveOnly=false', () => expect(pipe('-123')).toBe('-123'))\n    it('trims second minus sign', () => expect(pipe('-1-2')).toBe('-12'))\n  })\n\n  describe('leading zeroes', () => {\n    const pipe = pipeFormatter(numberFormatter)\n    it('removes leadizng zeroes', () => expect(pipe('000001')).toBe('1'))\n    it('preserves last zero', () => expect(pipe('000000')).toBe('0'))\n    it('preserves single zero', () => expect(pipe('0')).toBe('0'))\n  })\n\n  describe('maxIntDigits', () => {\n    const pipe = pipeFormatter(numberFormatter.setup({ maxIntDigits: 3, positiveOnly: false }))\n    it('is configurable', () => expect(pipe('12345')).toBe('123'))\n    it('does not include minus sign', () => expect(pipe('-123')).toBe('-123'))\n    it('does not include leading zeroes', () => expect(pipe('0123')).toBe('123'))\n  })\n\n  describe('fraction format', () => {\n    const pipe = pipeFormatter(numberFormatter.setup({ maxFracDigits: 4 }))\n    it('preserves empty string', () => expect(pipe('')).toBe(''))\n    it('separates thousands', () => expect(pipe('123456789')).toBe('123 456 789'))\n    it('does not separate frac', () => expect(pipe('123456789.9999')).toBe('123 456 789.9999'))\n    it('normalizes decimal separator', () => expect(pipe('123,9999')).toBe('123.9999'))\n    it('trims muliple fraction', () => expect(pipe('123.45.66')).toBe('123.45'))\n    it('trims long fraction', () => expect(pipe('9.12345678901234567890')).toBe('9.1234'))\n    it('preserves trailing comma', () => expect(pipe('9.')).toBe('9.'))\n  })\n})\n"],"file":"numberFormatter.test.js"}