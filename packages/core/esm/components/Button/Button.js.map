{"version":3,"sources":["../../../src/components/Button/Button.tsx"],"names":["React","isValidElement","foldThemeParams","createClassName","uiComponent","filterProps","useGroupHook","Spinner","SpinnerComponent","Text","TextComponent","buttonTheme","buttonClassName","themeStyle","props","display","shrink","shape","p","textRules","_","kind","borderWidth","pressedOffset","Button","theme","tokens","ref","setRef","type","href","undefined","groupProps","aria","checked","disabled","loading","IconBefore","IconAfter","buttonStyle","style","Tag","renderIconSlot","icon","iconProps","renderTextSlot","children","iconBefore","iconAfter"],"mappings":"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","sourcesContent":["import React, { isValidElement, ReactNode } from 'react'\nimport { foldThemeParams, createClassName } from '../../styled-system/'\nimport { uiComponent } from '../../theme/'\nimport { filterProps } from '../../utils/'\nimport { IconProps } from '../Icon/'\nimport { useGroupHook } from '../Layout/Group'\nimport { Spinner as SpinnerComponent } from '../Spinner/'\nimport { Text as TextComponent, TextProps } from '../Text/'\nimport { ButtonProps } from './contract'\nimport { buttonTheme } from './theme'\n\nconst buttonClassName = createClassName<ButtonProps, typeof buttonTheme, 'Button'>(\n  (themeStyle, props) => ({\n    display: 'inline-block',\n    shrink: false,\n    ...themeStyle,\n    ...props,\n    ...(props.shape === 'circle' || props.shape === 'square') && { p: 'none' },\n  }),\n  (textRules, { kind }, _, themeStyle) => (`\n    font-family: inherit;\n    cursor: pointer;\n    text-align: center;\n    text-decoration: none;\n    margin: 0;\n    line-height: 0;\n    position: relative;\n    white-space: nowrap;\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n    &::-moz-focus-inner {\n      border: 0;\n    }\n\n    &[data-group] {\n      box-shadow: none;\n    }\n\n    &[data-group~='horizontal']:not([data-group~='last']):not([data-group~='spacing']) {\n      margin-right: ${kind === 'outline' ? '-' : ''}${themeStyle.borderWidth}px;\n      border-bottom-right-radius: 0px;\n      border-top-right-radius: 0px;\n    }\n\n    &[data-group~='horizontal']:not([data-group~='first']):not([data-group~='spacing']) {\n      border-bottom-left-radius: 0px;\n      border-top-left-radius: 0px;\n    }\n\n    &[data-group~='vertical']:not([data-group~='last']):not([data-group~='spacing']) {\n      margin-bottom: ${kind === 'outline' ? '-' : ''}${themeStyle.borderWidth}px;\n      border-bottom-left-radius: 0px;\n      border-bottom-right-radius: 0px;\n    }\n\n    &[data-group~='vertical']:not([data-group~='first']):not([data-group~='spacing']) {\n      border-top-left-radius: 0px;\n      border-top-right-radius: 0px;\n    }\n\n    a& {\n      display: inline-flex;\n      justify-content: center;\n      align-items: center;\n    }\n\n    & > [data-icon='spinner'] {\n      position: absolute;\n      margin: auto;\n      left: 0;\n      right: 0;\n      top: 0;\n      bottom: 0;\n    }\n\n    ${ themeStyle.pressedOffset ? `\n      &:not(:disabled):active > *, &[data-state~=active] > *  {\n        transform: translateY(1px);\n      }\n    ` : '' }\n\n    &[aria-busy='true'] > :not([data-icon='spinner']) {\n      visibility: hidden;\n    }\n\n    ${textRules}\n  `)\n)\n\nexport const Button = uiComponent('Button', buttonTheme)<\n  ButtonProps,\n  HTMLButtonElement | HTMLLinkElement\n>((props, { theme, tokens }, [ref, setRef]) => {\n  props.type = props.href ? undefined : props.type\n  const groupProps = useGroupHook(ref, props)\n\n  const aria = {\n    'aria-checked': groupProps.checked,\n    'aria-disabled': groupProps.disabled,\n    'aria-busy': groupProps.loading,\n  }\n\n  const { Button, Text, IconBefore, IconAfter, Spinner } = foldThemeParams(groupProps, theme)\n  const buttonStyle = buttonClassName(groupProps, tokens, Button.style)\n\n  const Tag = props.href ? 'a' : 'button'\n\n  const renderIconSlot = (icon: ButtonProps['iconBefore'] | ButtonProps['iconAfter'], iconProps: IconProps) => (\n    typeof icon === 'function' ? icon(iconProps) :\n    isValidElement(icon) ? <icon.type {...iconProps} {...icon.props} /> :\n    undefined\n  )\n  const renderTextSlot = (children: ReactNode, props: TextProps) => (\n    isValidElement(children) ? <children.type {...props} {...children.props} /> :\n    typeof children === 'function' ? children(props) :\n    <TextComponent {...props}>{ children }</TextComponent>\n  )\n\n  return (\n    <Tag css={buttonStyle} ref={setRef} {...aria} {...filterProps(groupProps)} >\n      {props.loading &&\n        <SpinnerComponent {...Spinner.props} />}\n      {props.iconBefore &&\n        renderIconSlot(props.iconBefore, IconBefore.props)}\n      {props.children &&\n        renderTextSlot(props.children, Text.props)}\n      {props.iconAfter &&\n        renderIconSlot(props.iconAfter, IconAfter.props)}\n    </Tag>\n  )\n})\n"],"file":"Button.js"}