{"version":3,"sources":["../../../src/components/Input/InputCore.tsx"],"names":["React","css","keyframes","filterProps","invokeAll","autofill","inputField","InputCore","forwardRef","props","ref","type","autoCorrect","spellCheck","preventClick","event","detail","stopPropagation","onClick","text","autoSize","value","placeholder","undefined","displayName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,SAAd;AACA,SAASC,WAAT,EAAsBC,SAAtB;;AAGA,IAAMC,QAAQ,GAAGH,SAAH,mBAAd,C,CAOA;;AACA,IAAMI,UAAU,GAAGL,GAAH,qBAiECI,QAjED,CAAhB;AA0EA,OAAO,IAAME,SAAS,gBAAGP,KAAK,CAACQ,UAAN,CAAiB,UAACC,KAAD,EAAwBC,GAAxB,EAA6D;AACrGD,EAAAA,KAAK;AACHE,IAAAA,IAAI,EAAE,MADH;AAEHC,IAAAA,WAAW,EAAE,KAFV;AAGHC,IAAAA,UAAU,EAAE;AAHT,KAIAJ,KAJA;AAKHC,IAAAA,GAAG,EAAHA;AALG,IAAL,CADqG,CASrG;AACA;;AACA,MAAMI,YAAY,GAAGV,SAAS,CAAC,UAACW,KAAD,EAAW;AACxC,QAAIA,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwBD,KAAK,CAACE,eAAN;AACzB,GAF6B,EAE3BR,KAAK,CAACS,OAFqB,CAA9B;AAIA,MAAMC,IAAI,GAAGV,KAAK,CAACW,QAAN,GAAiBX,KAAK,CAACY,KAAN,IAAeZ,KAAK,CAACa,WAArB,IAAoC,EAArD,GAA0DC,SAAvE;AAEA,SACE;AAAK,IAAA,GAAG,EAAEjB,UAAV;AAAsB,kBAAYa;AAAlC,KACE,oCAAWhB,WAAW,CAACM,KAAD,CAAtB;AAA+B,IAAA,OAAO,EAAEK;AAAxC,KADF,CADF;AAKD,CAtBwB,CAAlB;AAwBPP,SAAS,CAACiB,WAAV,GAAwB,WAAxB","sourcesContent":["import React from 'react'\nimport { css, keyframes } from '../../styled-system/'\nimport { filterProps, invokeAll } from '../../utils/'\nimport { InputCoreProps } from './contract'\n\nconst autofill = keyframes`\n  100% {\n    background: transparent;\n    color: inherit;\n  }\n`\n\n// @-moz-document url-prefix() - стили только дла FF\nconst inputField = css`\n  width: 100%;\n  height: 100%;\n  flex-shrink: 1;\n  display: inline-block;\n  position: relative;\n  visibility: hidden;\n  min-width: 5px;\n\n  &[data-value] {\n    width: auto;\n  }\n\n  &[data-value]::before {\n    content: attr(data-value);\n    display: inline-block;\n    white-space: pre;\n    padding-right: 2px;\n  }\n\n  @-moz-document url-prefix() {\n    & > input {\n      height: 100%;\n    }\n  }\n\n  & > input {\n    box-sizing: border-box;\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    bottom: 0;\n    padding: 0px;\n    margin: 0px;\n    border-width: 0;\n    visibility: visible;\n    font-size: inherit;\n    font-family: inherit;\n    font-weight: inherit;\n    line-height: inherit;\n    color: inherit;\n    outline: none;\n    background-color: transparent;\n    -webkit-text-fill-color: currentcolor;\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n    text-overflow: ellipsis;\n    overflow: hidden;\n  }\n\n  & > [disabled] {\n    cursor: inherit;\n  }\n\n  & > ::-webkit-inner-spin-button {\n    display: none\n  }\n  & > [type=number] {\n    -moz-appearance: textfield;\n  }\n\n  & > input:-webkit-autofill,\n  & > input:-webkit-autofill:hover,\n  & > input:-webkit-autofill:focus,\n  & > input:-webkit-autofill:active {\n    animation: ${autofill} 0s forwards;\n  }\n\n  & > input::-ms-clear,\n  & > input::-ms-reveal {\n    display: none;\n  }\n`\n\nexport const InputCore = React.forwardRef((props: InputCoreProps, ref: React.Ref<HTMLInputElement>) => {\n  props = {\n    type: 'text',\n    autoCorrect: 'off',\n    spellCheck: false,\n    ...props,\n    ref,\n  } as InputCoreProps\n\n  // Прерываем всплытие события click вызванное триггером label, без отмены событие клика будет вызвано дважды\n  // Когда мы триггерим клик по инпуту через лейбл в свойстве detail будет значение 0, так как клик был програмный\n  const preventClick = invokeAll((event) => {\n    if (event.detail === 0) event.stopPropagation()\n  }, props.onClick)\n\n  const text = props.autoSize ? props.value || props.placeholder || '' : undefined\n\n  return (\n    <div css={inputField} data-value={text}>\n      <input {...filterProps(props)} onClick={preventClick} />\n    </div>\n  )\n})\n\nInputCore.displayName = 'InputCore'\n"],"file":"InputCore.js"}