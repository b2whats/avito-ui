{"version":3,"sources":["../../../src/components/Input/contract.ts"],"names":["InputPreset"],"mappings":"AAKA,WAAYA,WAAZ;;WAAYA,W,MAAAA,W,KAAAA,W","sourcesContent":["import React, { Ref, InputHTMLAttributes } from 'react'\nimport type { Formatter, NumberFormatterSettings } from '../../formatters'\nimport { MarginProperties, PaddingProperties } from '../../styled-system/'\nimport { ChangeHandler } from '../../utils'\n\nexport enum InputPreset {}\n\nexport interface InputCoreProps extends PaddingProperties, Pick<InputHTMLAttributes<HTMLInputElement>, 'inputMode'> {\n  ref: Ref<HTMLInputElement>\n  /** Автоматическая ширина поля */\n  autoSize?: boolean\n  /** Id */\n  id?: string\n  /** Имя */\n  name?: string\n  /** Тип */\n  type?: string\n  /** Значение */\n  value?: string | number | null\n  /** Подсказка */\n  placeholder?: string\n  /** Неактивное состояние */\n  disabled?: boolean\n  /** Поле не может быть пустым */\n  required?: boolean\n  /** Read-only состояние */\n  readOnly?: boolean\n  /** Класс элемента */\n  className?: string\n\n  onClick?(event: React.MouseEvent<HTMLInputElement>): void\n  onChange?(event: React.ChangeEvent<HTMLInputElement>): void\n  onFocus?(event: React.FocusEvent<HTMLInputElement>): void\n  onBlur?(event: React.FocusEvent<HTMLInputElement>): void\n  onKeyDown?(event: React.KeyboardEvent<HTMLInputElement>): void\n  onMouseDown?(event: React.MouseEvent<HTMLInputElement>): void\n}\n\nexport interface InputProps extends Omit<InputCoreProps, 'className' | 'onChange'>, MarginProperties {\n  /** Размер */\n  size?: 's' | 'm' | 'l'\n  /** Синтетическое изменение */\n  onChange?: ChangeHandler<string | number | null, HTMLInputElement>\n  /** Форматирование и маски */\n  mask?: Formatter\n  /** Крестик очистки */\n  clearable?: boolean | 'always'\n  /** Состояние загрузки */\n  loading?: boolean\n  /** Внешний вид компонента */\n  kind: 'fill' | 'outline'\n  /** Цветовые варианты */\n  variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'error'\n  /** Тип текстового поля */\n  type?: 'text' | 'number' | 'phone' | 'email' | 'tel'\n  /** Иконка в начале */\n  iconBefore?: React.ReactNode\n  /** Иконка в конце */\n  iconAfter?: React.ReactNode\n  /** Иконка перед инпутом */\n  prefix?: string | React.ReactNode\n  /** Иконка после инпута */\n  postfix?: string | React.ReactNode\n  /** Инлайновое поведение */\n  inline?: boolean\n  /** пресет */\n  preset?: keyof typeof InputPreset,\n  renderCore?: (props: InputCoreProps) => JSX.Element\n}\n\nexport interface InputNumberProps extends Omit<InputProps, 'type' | 'formatter'>, NumberFormatterSettings {}\n\n"],"file":"contract.js"}