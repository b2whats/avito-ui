{"version":3,"sources":["../../../src/components/Toggle/Toggle.tsx"],"names":["React","useEffect","useState","usePrevent3DTouch","foldThemeParams","createClassName","uiComponent","filterProps","invokeAll","useGroupHook","Text","toggleTheme","toggleClassName","_","props","display","valign","shape","undefined","textRules","switchClassName","themeStyle","shrink","adjacentSelector","variant","Toggle","className","children","theme","tokens","ref","setRef","groupProps","_demo","onChange","mode","checked","v","indeterminate","current","Boolean","aria","role","disabled","loading","preventFocus","event","preventDefault","preventLabelClick","stopPropagation","onClick","value","name","type","Switch","Icon","Label","toggleStyle","style","switchStyle","label","labelPosition"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { usePrevent3DTouch } from '../../hooks/'\nimport { foldThemeParams, createClassName } from '../../styled-system/'\nimport { uiComponent } from '../../theme/'\nimport { filterProps, invokeAll } from '../../utils/'\nimport { useGroupHook } from '../Layout/'\nimport { Text } from '../Text/'\nimport { ToggleProps } from './contract'\nimport { toggleTheme } from './theme'\n\nconst toggleClassName = createClassName<ToggleProps, typeof toggleTheme>(\n  (_, props) => ({\n    display: 'inline-flex',\n    valign: 'baseline',\n    ...props,\n    shape: undefined,\n  }),\n  (textRules) => (`\n    position: relative;\n    -webkit-tap-highlight-color: rgba(0,0,0,0);\n    -webkit-touch-callout: none;\n    -webkit-user-select: none;\n\n    & > input {\n      clip: rect(0, 0, 0, 0);\n      height: 1px;\n      position: absolute;\n      white-space: nowrap;\n      width: 1px;\n      margin: -1px;\n      border-width: 0;\n      border-style: initial;\n      border-color: initial;\n      border-image: initial;\n      overflow: hidden;\n      padding: 0;\n    }\n\n    &[aria-disabled] {\n      pointer-events: none;\n    }\n\n    ${textRules}\n  `)\n)\n\nconst switchClassName = createClassName<ToggleProps, typeof toggleTheme>(\n  (themeStyle, props) => ({\n    display: 'inline-flex',\n    shrink: false,\n    shape: props.shape,\n    adjacentSelector: 'input',\n    variant: props.variant,\n    ...themeStyle,\n  }),\n  (textRules) => (`\n    transition: background-color 0.2s ease 0s;\n    -webkit-user-select: none;\n\n    &::before {\n      content: 'x';\n      width: 0px;\n      overflow: hidden;\n      align-self: center;\n      color: transparent;\n    }\n\n    ${textRules}\n  `)\n)\n\nexport const Toggle = uiComponent('Toggle', toggleTheme)<ToggleProps, HTMLInputElement>((\n  { className, children, ...props },\n  { theme, tokens },\n  [ref, setRef]\n) => {\n  const groupProps = useGroupHook(ref, props)\n\n  // Uncontrolled input for demos\n  if (tokens._demo && !groupProps.onChange && groupProps.mode === 'checkbox') {\n    const [checked, onChange] = useState(groupProps.checked || false)\n    groupProps.checked = checked\n    groupProps.onChange = v => onChange(v.checked)\n  }\n\n  useEffect(() => {\n    if (props.indeterminate !== undefined && ref.current) {\n      ref.current.indeterminate = props.indeterminate\n    }\n  }, [props.indeterminate])\n\n  const checked = groupProps.indeterminate ? 'mixed' as const : Boolean(groupProps.checked)\n\n  const aria = {\n    role: groupProps.role || groupProps.mode,\n    'aria-checked': checked,\n    'aria-invalid': groupProps.variant === 'error',\n    'aria-disabled': groupProps.disabled,\n    'aria-busy': groupProps.loading,\n  }\n\n  const preventFocus = (event: React.MouseEvent<Element> | React.TouchEvent<Element>) => {\n    event.preventDefault()\n  }\n\n  const preventLabelClick = invokeAll((event: React.SyntheticEvent) => event.stopPropagation(), groupProps.onClick)\n\n  const onChange = () => {\n    const value = {\n      name: groupProps.name,\n      value: groupProps.value,\n      checked: !groupProps.checked,\n      type: aria.role,\n    }\n\n    groupProps.onChange && groupProps.onChange(value)\n  }\n\n  const { Toggle, Switch, Icon, Label } = foldThemeParams(groupProps, theme)\n  const toggleStyle = toggleClassName(groupProps, tokens, Toggle.style)\n  const switchStyle = switchClassName(groupProps, tokens, Switch.style)\n  const label = props.label && <Text {...Label.props} crop>{props.label}</Text>\n\n  return (\n    <label ref={usePrevent3DTouch()} css={toggleStyle} {...aria} onMouseDown={preventFocus}>\n      {props.labelPosition === 'start' && label}\n      <input\n        {...filterProps(groupProps)}\n        ref={setRef}\n        type={props.mode}\n        onChange={onChange}\n        onClick={preventLabelClick} />\n      <div css={switchStyle} className={className}>\n        {children && children({ checked, loading: props.loading, Icon })}\n      </div>\n      {props.labelPosition === 'end' && label}\n    </label>\n  )\n})\n"],"file":"Toggle.js"}